/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: victory_mirosya (https://sketchfab.com/victory_mirosya)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/fox-f372c04de44640fbb6a4f9e4e5845c78
Title: Fox
*/

import { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { Material, Object3D, SkinnedMesh } from "three";

import scene from "../assets/3d/fox.glb";
import * as THREE from "three";

type GLTFResult = GLTF & {
    nodes: {
        GLTF_created_0_rootJoint: Object3D;
        Object_7: SkinnedMesh;
        Object_8: SkinnedMesh;
        Object_9: SkinnedMesh;
        Object_10: SkinnedMesh;
        Object_11: SkinnedMesh;
    };
    materials: {
        PaletteMaterial001: Material;
    };
};

interface Props {
    position: [x: number, y: number, z: number];
    rotation: [x: number, y: number, z: number];
    scale: [x: number, y: number, z: number];
    currentAnimation: string;
}

export function Fox({ position, rotation, scale, currentAnimation }: Props) {
    const group = useRef<THREE.Group>(null);
    const { nodes, materials, animations } = useGLTF(
        scene
    ) as unknown as GLTFResult;
    const { actions } = useAnimations(animations, group);

    useEffect(() => {
        console.log(actions);
        Object.values(actions).forEach((actions) => actions?.stop());

        if (actions[currentAnimation]) {
            actions[currentAnimation]?.play();
        }
    }, [actions, currentAnimation]);

    return (
        <group
            ref={group}
            position={position}
            rotation={rotation}
            scale={scale}
            dispose={null}
        >
            <group name="Sketchfab_Scene">
                <primitive object={nodes.GLTF_created_0_rootJoint} />
                <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.PaletteMaterial001}
                    skeleton={nodes.Object_7.skeleton}
                />
                <skinnedMesh
                    name="Object_8"
                    geometry={nodes.Object_8.geometry}
                    material={materials.PaletteMaterial001}
                    skeleton={nodes.Object_8.skeleton}
                />
                <skinnedMesh
                    name="Object_9"
                    geometry={nodes.Object_9.geometry}
                    material={materials.PaletteMaterial001}
                    skeleton={nodes.Object_9.skeleton}
                />
                <skinnedMesh
                    name="Object_10"
                    geometry={nodes.Object_10.geometry}
                    material={materials.PaletteMaterial001}
                    skeleton={nodes.Object_10.skeleton}
                />
                <skinnedMesh
                    name="Object_11"
                    geometry={nodes.Object_11.geometry}
                    material={materials.PaletteMaterial001}
                    skeleton={nodes.Object_11.skeleton}
                />
            </group>
        </group>
    );
}

useGLTF.preload(scene);
